commande git : 
git clone https://github.com/malonesk/Test.git

Usage:
git action parametres 
Aide : man ou git help action
	Ex : git help clone, man git clone

Configuration :
git config [type] nom_param [valeur_param]
	type : 	 --system (pour tout les users du system) /etc/gitconfig,
			 --global (pour tt projets du user) ~/.gitconfig, 
			 --local (pour un projet (depot) donné) DEPOT/.git/config.
	ex: git config --global user.name "Jeremy Tran"
	    git config --global color.ui auto //coloration syntaxique

// Modifier créer un nouveau fichier
git status
git diff (fais la difference entre un fich du rep de travail et l'index
git diff --word-diff (difference calculée par mot)
git add fichier
git diff --cached (diff entre cache et dépôt)
git commit (ouvre un editeur (par defaut, changeable) pour editer un commit (ici, vi ou nano)
appronfondir l'utilisation de vi :
un mode insertion pour taper le texte, un mode commande 
commande → insertion : i
insertion → commande : echap
commande ::wq (write + quit) (se fait aussi grâce à ZZ)
		:q! (quit force)

git commit -a (fait automatiquement le add pour tout les fichiers modifiés (mais pas les nouveaux fichiers))
git commit -m ''Message…'' (ou git commit -am ''message'') (dans le cas d'un commit court)
gitk (affiche la fenetre graphique des commit)
git show (affiche le dernier commit)
git log (affiche tous les commit)
git log -p (afficher les modifications en plus)
git log --stat --summary
git log --oneline (id commit + premiere ligne message commit)

Envoyer les commit vers le serveur distant :
git push
Recevoir depuis le depot distant :
git fetch (envoie les fichier dans le depot local)
git pull (envoie les fichiers dans le depot puis dans le rep de travail) // en pratique, pull plus souvent utiliser (pull = fetch + merge)

Exemple de commits :
faire des 'petits' commit au fur et a mesure (correction d'un bug peut etre décrit par plusieurs petit commit, avec les infos pourquoi comment…)

Ajouter/supprimer des fichiers
ajout : git add fichier    (pusi git commit pour valider (git add ajoutant le fichier dans l'index)
supression : git rm fichier (puis git commit)

Déplacer/renommer
git mv source destination (git commit) (enregistrer comme suppression + ajout)

Pour voir les déplacements : 
git log --summary
git log --summary -M (retrouve les déplacements effectués)

parfois, on a des fichiers qu'on ne souhaite pas enregistrer
Ex : *.class, *.o, *~, fichier_secret 
On peut lister dans un fichier nommé : git ignore (dans le .ignore : un fichier par ligne (accepte la sytaxe etoile : ex: *.class)
dans la liste : introduction de commentaires possibles grâce à #
le fichier .gitignore est lui enrégistré 
// man git ignore

Mettre du travail de coté:
git stash (sauvegarde)
git stash show (voir)
git stash pop (permet de reprendre)
git stash drop (supprimer)
git stash list (lister tout ce qu'on a mis de coté)
la stash peut contenir plusieurs modifications (ajouter sous forme de pile, on recupere donc le dernier ajouter avec pop)

LES BRANCHES
branche master (principale)
branche experimentale
branche par développeur
branche principale (v1.0, v2.0...) puis creation branche pour v1.1 (ex correction de bug)

git branch experimental (creation)
git branch (lister les branches)
changer de branche : git checkout experimental
// // A REGARDER git cherry-pick commit (bouger un commit d'une branche à l'autre (copie))

editer des fichiers et les enregistrer
git commit -a   -> a partir de la, si l'on est dan la branche exp, les 2 branches commencent à divergées
on revient sur master : git checkout master
editer les fichiers : git commit -a

git merge experimental (fusionner 2 branches)
/!\ possibilité de conflits -> dans ce cas, à règler manuellement

si conflits : 
git diff (voir)
<<< HEAD ... version de master
===
>>> experimental
editer les fichiers, puis git commit -a




 
